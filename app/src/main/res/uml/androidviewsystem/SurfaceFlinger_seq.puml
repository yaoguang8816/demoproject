@startuml
title
<font color=red size=16>Surfaceflinger初始化流程图</font>

endtitle

header
<font color=red>Warning:</font>
Do not use for commercial purposes.
endheader

participant main_surfaceflinger.cpp as MSF
participant SurfaceFlingerFactory.cpp as SFF
participant SurfaceFlinger.cpp as SF
participant MessageQueue as MQ
participant Scheduler.cpp as SC
participant EventThread as ET
participant DispSync as DS
participant DispSyncSource as DSS

==SurfaceFlinger init==
MSF -> MSF : main
activate MSF
'第一步，构造SurfaceFlinger
MSF -> SFF : createSurfaceFlinger
activate SFF
'note over SFF
'各种初始化：
'EventControlThread
'HWComposer
'MessageQueue
'PhaseOffsets
'Scheduler
'SurfaceInterceptor
'DisplayDevice
'GraphicBuffer
'BufferQueue
'各种Layer
'end note
SFF -> SF : SurfaceFlinger(factory)
deactivate SFF
activate SF
SF -> SF : <<create MessageQueue>> \nmEventQueue
deactivate SF
SF -> SF : onFirstRef
note over SF
C++ 智能指针，第一次引用mEventQueue
会调用onFirstRef
end note
activate SF
SF -> MQ : init()
note over MQ
init mFlinger,mLooper,mHandler
end note
deactivate SF

'第二步，初始化SurfaceFlinger
MSF -> SF : init()
activate SF
SF -> SC : <<create Scheduler>>
activate SC
SC -> DS : <<create DispSync>>
activate DS
DS -> DS : <new DispSyncThread>
return
deactivate DS
SC -> DS : init()
activate DS
DS -> DS : <DispSyncThread.run>
return
deactivate DS
SC -> SC : <timers init>
SC --> SF
deactivate SC
SF -> SC : createConnection
activate SC
note over SF, SC
分别创建"app","sf"对EventThread的Connection
end note
SC -> SC : makeEventThread
activate SC
SC -> DSS : <<create DispSyncSource>>
DSS -> DSS : mDispSync=DispSync
DSS --> SC
SC -> ET : <<create EventThread>>
ET --> SC
deactivate SC
SC -> SC : createConnectionInternal
activate SC
SC -> ET : createEventConnection
note over ET
关于EventThreadConnection参见EventThreadConnection类图
end note
ET --> SC : return EventThreadConnection
deactivate SC
SC --> SF
deactivate SC
SF -> MQ : setEventConnection("sf")
activate MQ
hnote over MQ
1. 创建mEventTube作为信息传输通道//<color #a138a8>channel</color>//
2. 设置让mLooper监听mEventTube.getFd()
3. 设置mLooper的回调为//<color #a138a8>cb_eventReceiver</color>//
end hnote
return
deactivate MQ
SF -> SF : //TODO other init
SF --> MSF
deactivate SF

'第三步
MSF -> SF : run()
activate SF
SF -> SF : //<color #f13828>循环等待</color>//\nwaitForEvent
activate SF
SF -> MQ : waitMessage
deactivate SF
deactivate SF
activate MQ
'MQ -> MQ : mLooper.pollOnce
note over MQ
当EventThread调用DisplayEventReceiver写数据
到mEventTube对应的//<color #a138a8>channel</color>//中的时候会触发handler.
//EventThread写数据流程可参见choreographer流程图//
end note
MQ -> MQ : <<mLooper.pollOnce>>
note over MQ
读取成功后会触发调用回调函数//<color #a138a8>cb_eventReceiver</color>//
end note
MQ -> MQ : cb_eventReceiver
MQ -> MQ : eventReceiver
hnote over MQ
1. 调用DisplayEventReceiver.getEvents获取信息
2. 记录当前时间座位VSync时间
3. 通话mHandler分发消息
end note
MQ -> MQ : Handler::handleMessage
activate MQ
MQ -> SF : onMessageReceived
deactivate MQ
deactivate MSF

legend left
SurfaceFlinger初始化以及基础消息框架流程
end legend

right footer Generated by Yaoguang
@enduml