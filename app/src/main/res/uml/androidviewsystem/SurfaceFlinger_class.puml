@startuml
title
<font color=red size=16>SurfaceFlinger类图</font>

endtitle

header
<font color=red>Warning:</font>
Do not use for commercial purposes.
endheader
'#############################
class Session {
    SurfaceSession mSurfaceSession
}
Session --> SurfaceSession
note top of Session
每一个Window会话都会创建
一个SurfaceComposerClient
end note
class SurfaceSession {
    nativeCreate()
}
SurfaceSession -- SurfaceComposerClient : JNI
'#############################
package SurfaceComposerClient {
    abstract "IInterface" as CIInterface
    abstract ISurfaceComposerClient
    class BnSurfaceComposerClient {
    }
    class BpSurfaceComposerClient {
    }
}
ISurfaceComposerClient -up-|> CIInterface
BnSurfaceComposerClient -up-|> ISurfaceComposerClient
BpSurfaceComposerClient -up-|> ISurfaceComposerClient

class Client {
    SurfaceFlinger mFlinger
}
Client -up-|> BnSurfaceComposerClient
Client <-left-> SurfaceFlinger

class SurfaceComposerClient {
    sp<ISurfaceComposerClient> mClient
    onFirstRef()
}
SurfaceComposerClient -up-> BpSurfaceComposerClient
SurfaceComposerClient .left. Client : Binder
note bottom of SurfaceComposerClient
使用ComposerService通过
ServiceManager获取Surfaceflinger，
然后调用Surfaceflinger::createConnection
建立到Client的连接
end note
SurfaceComposerClient --> ComposerService
'#############################
package SurfaceComposer {
    abstract IInterface
    abstract ISurfaceComposer
    class BnSurfaceComposer {
    }
    class BpSurfaceComposer {
    }
}
ISurfaceComposer -up-|> IInterface
BnSurfaceComposer -up-|> ISurfaceComposer
BpSurfaceComposer -up-|> ISurfaceComposer

class ComposerService {
}
ComposerService -up-> BpSurfaceComposer
'#############################
package HWC2 {
    class ComposerCallback {
        onRefreshReceived()
        onVSyncReceived()
    }
    class Device {
    }
    class Display {
    }
    class Layer {
    }
}
'#############################
class SurfaceFlinger {
    Factory& mFactory
    unique_ptr<Scheduler> mScheduler
    unique_ptr<MessageQueue> mEventQueue
    unique_ptr<SurfaceInterceptor> mInterceptor
    unique_ptr<compositionengine::CompositionEngine> mCompositionEngine
    vector<sp<Layer>> mLayersPendingRefresh
    init()
    ISurfaceComposerClient createConnection()
}
SurfaceFlinger --|> ComposerCallback
SurfaceFlinger -up-|> BnSurfaceComposer
SurfaceFlinger --> Layer
SurfaceFlinger --> Scheduler
SurfaceFlinger --> Factory
SurfaceFlinger <--> MessageQueue
SurfaceFlinger -left-> CompositionEngine
SurfaceFlinger --> SurfaceInterceptor
'#############################
class MessageQueue {
    SurfaceFlinger mFlinger
    Looper mLooper
    Handler mHandler
}
'#############################
class Scheduler {
    DispSync mPrimaryDispSync
    createConnection()
}
Scheduler --> DispSync
Scheduler --> DispSyncSource
'note left of Scheduler
'SurfaceFlinger init的时候调用createConnection创建EventThread
'end note
'#############################
class Factory {
    //位于SurfaceFlingerFactory.h
    createBufferQueue()
}
Factory -down-> BufferQueue
class BufferQueue {
}
'#############################
class SurfaceInterceptor {
}

'#############################
class RenderEngine {
}
class GLESRenderEngine {
}
GLESRenderEngine --|> RenderEngine
'#############################
class HWComposer {
}
class CompositionEngine {
    HWComposer mHwComposer
    RenderEngine mRenderEngine
}
CompositionEngine -up-> RenderEngine
CompositionEngine -up-> HWComposer
'#############################
class DispSync {
}
class DispSyncSource {
    DispSync mDispSync
}
DispSyncSource -> DispSync

legend left
BpXXX client端
BnXXX server端
endlegend

right footer Generated by Yaoguang
@enduml