@startuml

title
<font color=red size=16>BufferQueue类图</font>

endtitle
header
<font color=red>Warning:</font>
Do not use for commercial purposes.
endheader
'---------------------------------------------------------------

'#############################
package GraphicConsumer {
    interface "IInterface" as graphicConsumer {
    }
    abstract IGraphicBufferConsumer {
    }
    class BnGraphicBufferConsumer {
    }
    class BpGraphicBufferConsumer {
    }
}
IGraphicBufferConsumer .up.|> graphicConsumer
BnGraphicBufferConsumer -up-|> IGraphicBufferConsumer
BpGraphicBufferConsumer -up-|> IGraphicBufferConsumer
'#############################
class BufferQueueConsumer {
    sp<BufferQueueCore> mCore
    SlotsType& mSlots
    acquireBuffer()
}
BufferQueueConsumer -up-|> BnGraphicBufferConsumer
'#############################
package GraphicProducer {
    interface "IInterface" as graphicProducer {
    }
    abstract IGraphicBufferProducer {
    }
    class BnGraphicBufferProducer {
    }
    class BpGraphicBufferProducer {
    }
}
IGraphicBufferProducer .up.|> graphicProducer
BnGraphicBufferProducer-up-|> IGraphicBufferProducer
BpGraphicBufferProducer -up-|> IGraphicBufferProducer
'#############################
class MonitoredProducer {
    IGraphicBufferProducer mProducer
    SurfaceFlinger mFlinger
}
MonitoredProducer -up-|> BnGraphicBufferProducer
MonitoredProducer -up-> BufferQueueProducer
'#############################
class BufferQueueProducer {
    sp<BufferQueueCore> mCore
    SlotsType& mSlots
    dequeueBuffer()
    queueBuffer()
}
BufferQueueProducer -up-|> BnGraphicBufferProducer
'#############################
class BufferQueueCore {
    SlotsType& mSlots

}
BufferQueueConsumer -up-> BufferQueueCore
BufferQueueProducer -up-> BufferQueueCore
'#############################
class BufferQueue {
    createBufferQueue(sp<IGraphicBufferProducer>* outProducer,
         sp<IGraphicBufferConsumer>* outConsumer)
}
'BufferQueue -up-> BufferQueueProducer
'BufferQueue -up-> BufferQueueConsumer
'#############################
class SlotsType {
    BufferSlot SlotsType[NUM_BUFFER_SLOTS]
}
class BufferSlot << (S,orchid) >> {
    GraphicBuffer mGraphicBuffer
}
SlotsType -up-> BufferSlot
BufferQueueCore o-up- SlotsType
BufferSlot -up-> GraphicBuffer

class GraphicBuffer {
}
'#############################
class Surface {
    sp<IGraphicBufferProducer> mGraphicBufferProducer
}
Surface -up-> BpGraphicBufferProducer
'#############################
'interface FrameAvailableListener{
'    void onFrameAvailable()
'    void onFrameReplaced()
'}
'interface ContentsChangedListener {
'}
'ContentsChangedListener ..|> FrameAvailableListener
class Layer {
    SurfaceFlinger mFlinger
}
class BufferLayer {
}
BufferLayer -left-|> Layer
class BufferQueueLayer {
    IGraphicBufferProducer mProducer
    BufferLayerConsumer mConsumer
    createBufferQueue()
}
'BufferQueueLayer ..|> ContentsChangedListener
BufferQueueLayer -left-|> BufferLayer
BufferQueueLayer -up-> MonitoredProducer
BufferQueueLayer -down-> BufferQueue
BufferQueueLayer -up-> BufferLayerConsumer
'#############################
class BufferLayerConsumer {
    RenderEngine& mRE
}
class ConsumerBase {
    IGraphicBufferConsumer mConsumer
    acquireBufferLocked()
}
BufferLayerConsumer -up-|> ConsumerBase
ConsumerBase -up-> BpGraphicBufferConsumer
'ConsumerBase .up.|> ConsumerListener
'#############################
class FramebufferSurface {
    nextBuffer()
}
FramebufferSurface -up-|> ConsumerBase
FramebufferSurface -up-|> DisplaySurface
class DisplaySurface {
}
class SurfaceFlinger {
    setupNewDisplayDeviceInternal(DisplaySurface)
}
SurfaceFlinger -down-> DisplaySurface

'--------------------------------------------------------
legend left
总结：
1. Producer 和 Consumer的mSlots都是由Core初始化的，都指向SlotsType，是BufferSlot类型的数组，共64个slot
2. 生产者调用dequeueBuffer的时候会寻找合适的slot并传递给调用者，然后就可以写数据到该slot里面
3. BufferQueueLayer主要功能是创建BufferQueue和通过callback协调consumer和producer的工作，比如producer queueBuffer之后通过onFrameAvailable通知consumer,利用mFlinger触发SF的surface合成操作
4. Surface负责申请buffer，绘制填充buffer，通知填充完成
5. SurfaceFlinger收到通知之后申请监听下一个Vsync，收到Vsync之后负责读取buffer，合成，然后送给显示
end legend
right footer Generated by Yaoguang
@enduml